#+STARTUP: inlineimages
#+STARTUP: hideblocks
#+TODO: TODO IN-PROGRESS DONE
#+PROPERTY: header-args:latex :results raw :headers '("\\usepackage{tikz}") :fit yes :imagemagick yes :iminoptions -density 300 :imoutoptions -flatten :eval never-export

#+TITLE: Automata Theory
#+AUTHOR: Lei Zhao
#+HTML_HEAD: <link type="text/css" href="../../styles/syntax-highlight.css" rel="stylesheet"/>
#+HTML_HEAD: <link type="text/css" href="../../styles/layout.css" rel="stylesheet"/>
#+HTML_HEAD: <script type="text/javascript" src="../../src/post.js"></script>
#+OPTIONS: ':t

[[https://lagunita.stanford.edu/courses/course-v1:ComputerScience+Automata+SelfPaced/courseware/751b6dfa045849d8bec2fdd55c89a3b9/][Automata Theory]] on Lagunita

* IN-PROGRESS Week 1: [[https://lagunita.stanford.edu/courses/course-v1:ComputerScience+Automata+SelfPaced/courseware/544b7a8df3844f428bc1a5125c594702/ec6439250bb4426ab93c543e140dacb4/][Finite Automata]]
  :PROPERTIES:
  :CUSTOM_ID: finite-automata
  :END:
** DONE Course outline and motivation
   CLOSED: [2017-08-26 Sat 11:00]
   :PROPERTIES:
   :CUSTOM_ID: course-outline-and-motivation
   :END:
Automata is ranked second after database for optional courses in a
Stanford survey of grads 5 years out.  3X the score for AI.

  * Regular expressions are used in many systems.
    - UNIX a.*b.
    - DTD describe XML tags with a RE format like
      ~person(name, addr, child*)~.
  * Finite automata model protocols, electronic circuits.
  * Context-free grammars are used to describe the syntax of
    essentially every programming language.
    - Not to forget their important role in describing natural
      languages.
  * And DTD taken as a whole, are really CFGs.
  * When developing solutions to real problems, we often confront the
    limitations of what software can do.
    - /Undecidable/ things - no program whatever can do it.
    - /Intractable/ things - there are programs, but no fast programs.
  * Automata theory gives you the tools.

Other Good Stuff

  * We'll learn how to deal formally with discrete systems.
    - Proofs: You never really prove a program correct, but you need
      to be thinking of why a tricky technique really works.
  * We'll gain experience with abstract models and constructions.
    - Models layered software architectures.

Course Outline

  * Regular Languages and their descriptors:
    - Finite automata, nondeterministic finite automata, regular
      expressions.
    - Algorithms to decide questions about regular languages, e.g., is
      it empty?
    - Closure properties of regular languages.
  * Context-free languages and their descriptors:
    - Context-free grammars, pushdown automata.
    - Decision and closure properties.
  * Recursive and recursively enumerable languages.
    - Turing machines, decidability of problems.
    - The limit of what can be computed.
  * Intractable problems.
    - Problems that (appear to) require exponential time.
    - NP-completeness and beyond.

** DONE Informal introduction to finite automata
   CLOSED: [2017-09-05 Tue 20:43]
   :PROPERTIES:
   :CUSTOM_ID: informal-introduction-to-finite-automata
   :END:

What is a Finite Automaton?

  * A formal system.
  * Remembers only a finite amount of information.
  * Information represented by its /state/.
  * State changes in response to /inputs/.
  * Rules that tell how the state changes in response to inputs are
    called /transitions/.


Tennis

  * /Match/ = 3-5 sets.
  * /Set/ = 6 or more games.

Scoring a Game

  * One person serves throughout.
  * To win, you must score at least 4 points.
  * You also must win by at least 2 points.
  * Inputs are s = "server wins point" and o = "opponent wins point."


#+BEGIN_SRC latex :file tennis.png
\usetikzlibrary{positioning,shapes,automata}
\begin{tikzpicture}
  [shorten >=1pt,node distance=1cm and 2.5cm,on grid,auto,
   every state/.style={ellipse,align=center}]
%% \draw[help lines] (0,0) grid (3,2);
\node[state,initial]     (Love)                                                 {Love};
\node[state]             (15-Love)     [above right=of Love]                    {15-Love};
\node[state]             (Love-15)     [below right=of Love]                    {Love-15};
\node[state]             (30-Love)     [above right=of 15-Love]                 {30-Love};
\node[state]             (15-all)      [below right=of 15-Love]                 {15-all};
\node[state]             (Love-30)     [below right=of Love-15]                 {Love-30};
\node[state]             (40-Love)     [above right=of 30-Love]                 {40-Love};
\node[state]             (30-15)       [below right=of 30-Love]                 {30-15};
\node[state]             (15-30)       [below right=of 15-all]                  {15-30};
\node[state]             (Love-40)     [below right=of Love-30]                 {Love-40};
\node[state,accepting]   (Server Wins) [above right=of 40-Love,text width=3em]  {Server Wins};
\node[state]             (40-15)       [below right=of 40-Love]                 {40-15};
\node[state]             (30-all)      [below right=of 30-15]                   {30-all};
\node[state]             (15-40)       [below right=of 15-30]                   {15-40};
\node[state,accepting]   (Opp'nt Wins) [below right=of Love-40,text width=3em]  {Opp'nt Wins};
\node[state]             (40-30)       [below right=of 40-15]                   {40-30};
\node[state]             (30-40)       [below right=of 30-all]                  {30-40};
\node[state]             (deuce)       [below right=of 40-30]                   {deuce};
\node[state]             (Add-in)      [above right=of 40-30]                   {Add-in};
\node[state]             (Add-out)     [below right=of 30-40]                   {Add-out};

\path[->] (Love)       edge               node {s}    (15-Love)
                       edge               node {o}    (Love-15)
          (15-Love)    edge               node {s}    (30-Love)
                       edge               node {o}    (15-all)
          (Love-15)    edge               node {s}    (15-all)
                       edge               node {o}    (Love-30)
          (30-Love)    edge               node {s}    (40-Love)
                       edge               node {o}    (30-15)
          (15-all)     edge               node {s}    (30-15)
                       edge               node {o}    (15-30)
          (Love-30)    edge               node {s}    (15-30)
                       edge               node {o}    (Love-40)
          (40-Love)    edge               node {s}    (Server Wins)
                       edge               node {o}    (40-15)
          (30-15)      edge               node {s}    (40-15)
                       edge               node {o}    (30-all)
          (15-30)      edge               node {s}    (30-all)
                       edge               node {o}    (15-40)
          (Love-40)    edge               node {s}    (15-40)
                       edge               node {o}    (Opp'nt Wins)
          (40-15)      edge               node {s}    (Server Wins)
                       edge               node {o}    (40-30)
          (30-all)     edge               node {s}    (40-30)
                       edge               node {o}    (30-40)
          (15-40)      edge               node {s}    (30-40)
                       edge               node {o}    (Opp'nt Wins)
          (40-30)      edge               node {s}    (Server Wins)
                       edge               node {o}    (deuce)
          (30-40)      edge               node {s}    (deuce)
                       edge               node {o}    (Opp'nt Wins)
          (deuce)      edge [bend left]   node {s}    (Add-in)
                       edge [bend left]   node {o}    (Add-out)
          (Add-in)     edge               node {s}    (Server Wins)
                       edge [bend left]   node {o}    (deuce)
          (Add-out)    edge [bend left]   node {s}    (deuce)
                       edge               node {o}    (Opp'nt Wins);
\end{tikzpicture}
#+END_SRC

#+CAPTION: The automaton for the game of tennis
#+ATTR_HTML: :width 800px
#+RESULTS:
[[file:tennis.png]]


Acceptance of Inputs

  * Given a sequence of inputs (/input string/), start in the start
    state and follow the transition from each symbol in turn.
  * Input is /accepted/ if you wind up in a final (accepting) state
    after all inputs have been read.

Language of an Automaton

  * The set of strings accepted by an automaton A is the /language/ of A.
  * Denoted L(A).
  * Different sets of final states → different languages.
  * Example: As designed, L(Tennis) = strings that determines the winner.

** DONE Deterministic Finite Automata
   CLOSED: [2017-12-29 Fri 13:11]
   :PROPERTIES:
   :CUSTOM_ID: deterministic-finite-automata
   :END:

Alphabets

  * An /alphabet/ is any finite set of symbols.
  * Examples:
    - ASCII, Unicode,
    - {0, 1} (/binary alphabet/),
    - {a, b, c}, {s, o},
    - set of signals used by a protocol.


Strings

  * A /string/ over an alphabet Σ is a list, each element of
    which is a member of Σ.
    - Strings shown with no commas or quotes, e.g., abc or 01101.
  * Σ^{*} = set of all strings over alphabet Σ.
  * The /length/ of a string is its number of positions.
  * ε stands for the /empty string/ (string of length 0).

Example: Strings

  * {0, 1}^{*} = {ε, 0, 1, 00, 01, 10, 11, 000, 001, ...}
  * Subtlety: 0 as a string, 0 as a symbol look the same.
    - Context determines the type.


Languages

  * A /language/ is a subset of Σ^{*} for some alphabet Σ.
  * Example: The set of string of 0s and 1s with no two consecutive 1s.
  * L = {ε, 0, 1, 00, 01, 10, 000, 001, 010, 100, 101, 0000,
    0001, 0010, 0100, 0101, 1000, 1001, 1010, ...}
    - Fibonacci sequence hides here.


Deterministic Finite Automata

  * A formalism for defining languages,
    consisting of:
    1. A finite set of /states/ (Q, typically).
    2. An /input alphabet/ (Σ, typically).
    3. A /transition function/ (δ, typically).
    4. A /start state/ (q_{0}, in Q, typically).
    5. A set of /final states/ (F \subset Q, typically).
       + "Final" and "accepting" are synonyms.


The Transition Function

  * Takes two arguments: a state and an input symbol.
  * δ(q, a) = the state that the DFA goes to when it is in state
    q and input a is received.
  * Note: always a next state - add a /dead state/ if no transition


Graph Representation of DFAs

  * Nodes = states.
  * Arcs represent transition function.
    - Arc from state p to state q labeled by all those input symbols
      that have transitions from p to q.
  * Arrow labeled "Start" to the start state.
  * Final states indicated by double circles.

#+BEGIN_SRC latex :file ing.png
\usetikzlibrary{positioning,shapes,automata}
\begin{tikzpicture}
  [shorten >=1pt,node distance=3cm,on grid,auto,inner xsep=0pt,
   every state/.style={ellipse,align=center}]
% \draw[help lines] (0,0) grid (3,2);
\node[state,initial]                    (nothing) {nothing};
\node[state,right=of nothing]           (i)       {saw \textit{i}};
\node[state,right=of i]                 (in)      {saw \textit{in}};
\node[state,accepting,right=of in]      (ing)     {saw \textit{ing}};

\path[->] (nothing) edge                       node         {\textit{i}}                    (i)
                    edge [in=150,out=120,loop] node [above] {not \textit{i}}                (nothing)
          (i)       edge                       node         {\textit{n}}                    (in)
                    edge [loop below]          node         {\textit{i}}                    (i)
                    edge [bend right]          node [above] {not \textit{i} or \textit{n}}  (nothing)
          (in)      edge                       node         {\textit{g}}                    (ing)
                    edge [bend right]          node [above] {\textit{i}}                    (i)
                    edge [bend right=90]       node [above] {not \texitit{i} or \textit{g}} (nothing)
          (ing)     edge [bend left]           node         {\textit{i}}                    (i)
                    edge [bend left=90]        node         {not \textit{i}}                (nothing);
\end{tikzpicture}
#+END_SRC

#+CAPTION: Recognizing strings ending in "ing"
#+ATTR_HTML: :width 600px
#+RESULTS:
[[file:ing.png]]


#+BEGIN_SRC latex :file send.png
\usetikzlibrary{positioning,shapes,automata}
\begin{tikzpicture}
  [shorten >=1pt,node distance=3cm,on grid,auto,inner xsep=0pt,
   every state/.style={ellipse,align=center}]
\node[state,initial]          (ready)   {Ready};
\node[state,right=of ready]   (sending) {sending};

\path[->] (ready)   edge              node {data in} (sending)
          (sending) edge [loop above] node {timeout} (sending)
                    edge [bend left]  node {ack} (ready);
\end{tikzpicture}
#+END_SRC

#+CAPTION: Protocol for sending data
#+ATTR_HTML: :width 500px
#+RESULTS:
[[file:send.png]]


A: String so far has no 11, does not end in 1.
B: String so far has no 11, but ends in a single 1.
C: Consecutive 1s have been seen.

#+BEGIN_SRC latex :file strings.png
\usetikzlibrary{positioning,shapes,automata}
\begin{tikzpicture}
  [shorten >=1pt,node distance=3cm,on grid,auto,inner xsep=0pt,
   every state/.style={ellipse,align=center}]
\node[state,initial,accepting] (A) {A};
\node[state,accepting,right=of A] (B) {B};
\node[state,right=of B] (C) {C};

\path[->] (A) edge              node {1}   (B)
              edge [loop above] node {0}   (A)
          (B) edge node {1} (C)
              edge [bend left]  node {0}   (A)
          (C) edge [loop above] node {0,1} (C);
\end{tikzpicture}
#+END_SRC

#+CAPTION: Strings without two consecutive 1s
#+NAME: img:strings
#+ATTR_HTML: :width 500px
#+RESULTS:
[[file:strings.png]]


Alternative Representation: Transition Table

|       |   | 0 | 1 |
|-------+---+---+---|
| \star | A | A | B |
| \star | B | A | C |
|       | C | C | C |
|-------+---+---+---|

Convention: Strings and Symbols
  * ... w, x, y, z are strings.
  * a, b, c, ... are single input symbols.

Extended Transition Function
  * We describe the effect of a string of inputs on a DFA by extending
    δ to a state and a string.
  * Intuition: Extended δ is computed for state q and inputs
    a_{1}a_{2}...a_{n} by following a path in the transition graph,
    starting at q and selecting the arcs with labels a_{1}, a_{2},
    ..., a_{n} in turn.

Inductive Definition of Extended δ
  * Induction on length of string.
  * Basis: δ(q, ε) = q
  * Induction: δ(q, wa) = δ(δ(q, w), a)
    * Remember: w is a string; a is an input symbol, by convention.

Delta-hat
  * We don't distinguish between the given delta and the extended
    delta or delta-hat.
  * The reason:
    $\hat\delta(q, a) = \delta(\hat\delta(q, \epsilon), a) = \delta(q, a)$

Language of a DFA
  * Automata of all kinds define languages.
  * If A is an automaton, L(A) is its language.
  * For a DFA A, L(A) is the set of strings labeling paths from the
    start state to a final state.
  * Formally: L(A) = the set of strings w such that δ(q_{0}, w) is in F.

Example: String in a Language
  * String 101 is in the language of the string [[img:strings][DFA]].
  * The language of this DFA is:
    - {w | w is in {0, 1}^{*} and w does not have two consecutive 1s}

Proofs of Set Equivalence
  * Often, we need to prove that two descriptions of sets are in fact
    the same set
  * Here, one set is "the language of this DFA," and the other is "the
    set of strings of 0s and 1s with no consecutive 1s."

Regular Languages
  * A language L is /regular/ if it is the language accepted by some DFA.
    * Note: the DFA must accept only the strings in L, no others.
  * Some languages are not regular.
    * Intuitively, regular languages "cannot count" to arbitrarily
      high integers.

Example: A Nonregular Language
  * L_{1} = {0^{n}1^{n} | n ≥ 1}
  * Note: a^{i} is conventional for i a's.
    * Thus, 0^{4} = 0000, e.g.
  * Read: The set of strings consisting of n 0s followed by n 1s,
    such that n is at least 1.
  * Thus, L_{1} = {01, 0011, 000111, ...}

Another Example
  * L_{2} = {w | w in {(, )}^{*} and w is /balanced/}
  * Balanced parentheses are those sequences of parentheses that can
    appear in an arithmetic expression.
  * E.g., (), ()(), (()), (()()), ...

But Many Languages are Regular
  * They appear in many contexts and have many useful properties.
  * Example: the strings that represent floating point numbers in your
    favorite language is a regular language.

Example: A Regular Language
  * L_{3} = {w | w in {0, 1}^{*} and w, viewed as a binary integer, is
    divisible by 23}
  * The DFA:
    * 23 states, named 0, 1, ..., 22.
    * Correspond to the 23 remainders of an integer divided by 23.
    * Start and only final state is 0.
    * If string w represents integer i, then assume δ(0, w) = i % 23.
    * Then w0 represents integer 2i, so we want δ(i%23, 0) = (2i) % 23.
    * Similarly, w1 represents 2i+1, so we want δ(i%23, 1) =
      (2i+1) % 23.
      - Just let δ(q, a) = (2q+a) % 23.
    * Example: δ(15, 0) = 30%23 = 7; δ(11, 1) = 23%23 = 0.

Another Exapmle
  * L_{4} = {w | w in {0, 1}^{*} and w, viewed as the reverse of a
    binary integer, is divisible by 23}
  * Example: 01110100 is in L_{4}, because its reverse, 00101110, is
    46 in decimal.
  * Hard to construct the DFA.
  * But there is a theorem that says the reverse of a regular language
    is also regular.

** DONE Nondeterministic finite automata
   CLOSED: [2018-01-02 Tue 14:44] DEADLINE: <2017-12-30 Sat>
   :PROPERTIES:
   :CUSTOM_ID: nondeterministic-finite-automata
   :END:
Nondeterminism
 * A /nondeterministic finite automaton/ has the ability to be in
   several states at once.
 * Transitions from a state on an input symbol can be to any set of
   states.
 * Start in one start state.
 * Accept if any sequence of choices lead to a final state.
 * Intuitively: the NFA always "guesses right."

Example: Moves on a Chessboard
 * States = squares
 * Inputs = r (move to an adjacent red square) and b (move to an
   adjacent black square).
 * Start state, final state are in opposite corners.

#+BEGIN_SRC latex :file chess3x3.png
  \usetikzlibrary{calc,math}
  \begin{tikzpicture}
    \foreach \n in {0,...,8} {
      \pgfmathsetmacro{\x}{mod(\n,3)+.5}
      \pgfmathsetmacro{\y}{2.5-div(\n,3)}
      \pgfmathsetmacro{\m}{int(\n+1)}
      \pgfmathsetmacro{\c}{mod(\n,2) ? "red!40" : "gray!70"}
      \fill[\c] (\x-.5,\y-.5) rectangle (\x+.5,\y+.5);
      \node at (\x, \y) {\m};
    }
    \draw (0,0) grid (3,3);
  \end{tikzpicture}
#+END_SRC

#+CAPTION: A 3×3 chessboard
#+NAME: img:chess3x3
#+ATTR_HTML: :width 300px
#+RESULTS:
[[file:chess3x3.png]]

|       |   | r       | b       |
|-------+---+---------+---------|
| →     | 1 | 2,4     | 5       |
|       | 2 | 4,6     | 1,3,5   |
|       | 3 | 2,6     | 5       |
|       | 4 | 2,8     | 1,5,7   |
|       | 5 | 2,4,6,8 | 1,3,7,9 |
|       | 6 | 2,8     | 3,5,9   |
|       | 7 | 4,8     | 5       |
|       | 8 | 4,6     | 5,7,9   |
| \star | 9 | 6,8     | 5       |

The string rbb is accepted by this NFA.

Formal NFA
 * A finite set of states, typically Q.
 * An input alphabet, typically Σ.
 * A transition function, typically δ.
 * A start state in Q, typically q_{0}.
 * A set of final states F \subset Q.

Transition Function of an NFA
 * δ(q, ε) is a set of states.
 * Extend to strings as follows:
   * Basis: δ(q, ε) = {q}
   * Induction: δ(q, wa) = the union over all states p in δ(q, w) of
     δ(p, a)

Language of an NFA
 * A string w is accepted by an NFA if δ(q_0, w) contains at least one
   final state.
 * The language of the NFA is the set of strings it accepts.

Example: Language of an NFA
 * For our [[img:chess3x3][chessboard]] NFA, we saw that rbb is accepted.
 * If the input consists of only b's, the set of accessible states
   alternates between {5} and {1,3,7,9}, so only even-length, nonempty
   strings of b's are accepted.
 * What about strings with at least one r?
   - The nonempty strings containing even number of b's and not ending
     with r are accepted.

Equivalence of DFAs, NFAs
 * A DFA can be turned into an NFA that accepts the same language.
 * If δ_D(q, a) = p, let the NFA have δ_N(q, a) = {p}.
 * Then the NFA is always in a set containing exactly one state---the
   state the DFA is in after reading the same input.


 * Surprisingly, for any NFA there is a DFA that accepts the same
   languages.
 * Proof is the /subset construction/.
 * The number of states of the DFA can be exponential in the number of
   states of the NFA.
 * Thus, NFAs accept exactly the regular languages.

Subset Construction
 * Given an NFA with states Q, inputs Σ, transition function δ_N,
   start state q_0, and final states F, construct equivalent DFA with:
   * States 2^Q (Set of subsets of Q).
   * Inputs Σ.
   * Start state {q_0}.
   * Final states = all those with a member of F.
   * The transition function δ_D is defined by:
     - δ_D({q_1, ..., q_k}, a) is the union over all i = 1, ..., k of
       δ_N(q_i, a).
   * Example: We'll construct the DFA equivalent of our "chessboard"
     NFA.

|       |             | r         | b           |
|-------+-------------+-----------+-------------|
| →     | {1}         | {2,4}     | {5}         |
|       | {2,4}       | {2,4,6,8} | {1,3,5,7}   |
|       | {5}         | {2,4,6,8} | {1,3,7,9}   |
|       | {2,4,6,8}   | {2,4,6,8} | {1,3,5,7,9} |
|       | {1,3,5,7}   | {2,4,6,8} | {1,3,5,7,9} |
| \star | {1,3,7,9}   | {2,4,6,8} | {5}         |
| \star | {1,3,5,7,9} | {2,4,6,8} | {1,3,5,7,9} |

Proof of Equivalence: Subset Construction
 * The proof is almost a pun.
 * Show by induction on |w| that
   - δ_N(q_0, w) = δ_D({q_0}, w)
 * Basis: w = ε: δ_N(q_0, ε) = δ_D({q_0}, ε) = {q_0}.
 * Inuduction:
   * Assume IH for strings shorter than w.
   * Let w = xa, IH holds for x.
   * Let δ_N(q_0, x) = δ_D({q_0}, x) = S.
   * Let T = the union over all states p in S of δ_N(p, a).
   * Then δ_N(q_0, w) = δ_D({q_0}, w) = T.

NFAs With ε-Transitions
 * We can allow state-to-state transitions on ε input.
 * These transitions are done spontaneously, without looking at the
   input string.
 * A convenience at times, but still only regular languages are
   accepted.

#+BEGIN_SRC latex :file epsilon-nfa.png
  \usetikzlibrary{positioning,shapes,automata}
  \begin{tikzpicture}[shorten >=1pt,node distance=3cm,on grid,auto]
    \node[state,initial]              (A) {A};
    \node[state,above right=of A]     (B) {B};
    \node[state,below right=of A]     (E) {E};
    \node[state,right=of B]           (C) {C};
    \node[state,accepting,right=of C] (D) {D};
    \node[state,right=of E]           (F) {F};

    \path[->] (A) edge node {1} (B)
                  edge node {0} (E)
              (B) edge node {1} (C)
                  edge [bend left] node {$\epsilon$} (D)
              (C) edge node {1} (D)
              (E) edge node {$\epsilon$} (B)
                  edge node {$\epsilon$} (C)
                  edge node {0} (F)
              (F) edge node {0} (D);
  \end{tikzpicture}
#+END_SRC

#+ATTR_HTML: :width 500px
#+RESULTS:
[[file:epsilon-nfa.png]]

|       |   | 0         | 1         | ε         |
| →     | A | {E}       | {B}       | \emptyset |
|       | B | \emptyset | {C}       | {D}       |
|       | C | \emptyset | {D}       | \emptyset |
| \star | D | \emptyset | \emptyset | \emptyset |
|       | E | {F}       | \emptyset | {B,C}     |
|       | F | {D}       | \emptyset | \emptyset |

Closure of States
 * CL(q) = set of states you can reach from state q following only
   arcs labeled ε.
 * Example: CL(A) = {A}, CL(E) = {B,C,D,E}.
 * Closure of a set of states = union of the closure of each state.

Extended Delta
$\DeclareMathOperator{\cl}{CL}$
 * Intuition: $\hat\delta(q, w)$ is the set of states you can reach
   from q following a path labeled w.
 * Basis: $\hat\delta(q, \epsilon) = \cl(q)$
 * Induction: $\hat\delta(q, wa) = \bigcup_{p \in \hat\delta(q, w)}
   \cl(\delta(p, a))$

Example: Extended Delta
 * $\hat\delta(A, \epsilon) = \cl(A) = \{A\}$
 * $\hat\delta(A, 0) = \cl(\delta(A, 0)) = \cl(\{E\}) = \{B,C,D,E\}$
 * $\hat\delta(A, 01) = \bigcup_{p \in \{B,C,D,E\}} \cl(\delta(p, 1))
   = \{C,D\}$

/Language/ of an ε-NFA is the set of strings w such that
$\hat\delta(q_0, w)$ contains a final state.

Equivalence of NFA and ε-NFA
$\newcommand{\abs}[1]{\left\lvert #1 \right\rvert}$
 * Every NFA is an ε-NFA.
   * It just has no transitions on ε.
 * Converse requires us to take an ε-NFA and construct an NFA that
   accepts the same language.
 * We do so by combining ε-transitions with the next transition on a
   real input.
 * Start with an ε-NFA with states Q, inputs Σ, start state q_0, final
   states F, and transition function δ_E.
 * Construct an "ordinary" NFA with states Q, inputs Σ, start state
   q_0, final states $F'$, and transition function δ_N.
 * Compute $\delta_N(q, a)$ as follows:
   - $\delta_N(q, a) = \bigcup_{p \in \cl(q)} \delta_E(p, a)$
 * $F' = \{q \mid \cl(q) \cap F \neq \varnothing\}$
 * Prove by induction on $\abs{w}$ that
   * $\cl(\hat\delta_N(q_0, w)) = \hat\delta_E(q_0, w)$.
 * Thus, the ε-NFA accepts w iff the "ordinary" NFA does.

Example: ε-NFA to NFA

|       |   | 0         | 1         |
| →     | A | {E}       | {B}       |
| \star | B | \emptyset | {C}       |
|       | C | \emptyset | {D}       |
| \star | D | \emptyset | \emptyset |
| \star | E | {F}       | {C,D}     |
|       | F | {D}       | \emptyset |

Summary
 * DFAs, NFAs, and ε-NFAs all accept exactly the same set of
   languages: the regular languages.
 * The NFA types are easier to deisgn and may have exponentially fewer
   states than a DFA.
 * But only a DFA can be implemented! (quantum computer for NFAs?)

** TODO Finite Automata Homework
   DEADLINE: <2017-12-31 Sun>

** TODO Challenge Problem 1

** TODO Problem Session 1
